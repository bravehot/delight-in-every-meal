// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum InviteStatus {
  PENDING  @map("PENDING")
  ACCEPTED @map("ACCEPTED")
}

enum TokenConsumedType {
  EXCHANGE @map("EXCHANGE")
  CONSUME  @map("CONSUME")
  REWARD   @map("REWARD")
}

enum ActivityLevel {
  SEDENTARY         @map("SEDENTARY") // 久坐（很少运动）：× 1.2
  LIGHTLY_ACTIVE    @map("LIGHTLY_ACTIVE") // 轻度活动（每周 1-3 次轻量运动）：× 1.375
  MODERATELY_ACTIVE @map("MODERATELY_ACTIVE") // 中等活动（每周 3-5 次中等运动）：× 1.55
  VERY_ACTIVE       @map("VERY_ACTIVE") // 高强度活动（每周 6-7 次高强度运动）：× 1.725
  EXTREMELY_ACTIVE  @map("EXTREMELY_ACTIVE") // 极高强度（运动员或重体力劳动者）：× 1.9
}

enum Gender {
  MALE   @map("MALE")
  FEMALE @map("FEMALE")
}

model User {
  id         String      @id @default(uuid())
  phoneNum   String      @unique
  password   String?
  name       String?
  avatar     String?
  gender     String?
  birthday   DateTime?
  address    String?
  email      String?
  isDisabled Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  checkIns   CheckIn[]
  points     UserPoints?
  userToken  UserToken?
  userHealth UserHealth?
}

model UserPoints {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  points    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model CheckIn {
  id              String   @id @default(uuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  date            DateTime @default(now())
  consecutiveDays Int // 连续签到天数
  points          Int // 签到获得的积分
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([userId, date])
  @@index([userId, date])
}

model UserToken {
  id        String             @id @default(uuid())
  userId    String             @unique
  user      User               @relation(fields: [userId], references: [id])
  amount    Int                @default(3000) // 默认3000个token
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  records   TokenUsageRecord[]

  @@index([userId])
}

model TokenUsageRecord {
  id             String            @id @default(uuid())
  userTokenId    String
  userToken      UserToken         @relation(fields: [userTokenId], references: [id])
  amount         Int
  type           TokenConsumedType
  createdAt      DateTime          @default(now())
  analysisRecord AnalysisRecord?
  imgUrl         String            @default("")
  result         Json              @default("{}")

  @@index([userTokenId])
}

model AnalysisRecord {
  id                 String           @id @default(uuid())
  tokenUsageRecord   TokenUsageRecord @relation(fields: [tokenUsageRecordId], references: [id])
  tokenUsageRecordId String           @unique
  imageURL           String
  foods              Json
  comments           String
  score              Int
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
}

model UserHealth {
  id            String        @id @default(uuid())
  userId        String        @unique
  user          User          @relation(fields: [userId], references: [id])
  height        Float // 身高（厘米）
  weight        Float // 体重（千克）
  tdee          Float // 总能量消耗（TDEE）
  gender        Gender // 性别
  activityLevel ActivityLevel // 活动水平
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  age           Int // 年龄

  @@index([userId])
}
